#!/usr/bin/lua

local vouchera = require('voucher.vouchera')
local utils = require('voucher.utils')
local uci = require('uci')
local json = require 'luci.jsonc'

local uci_cursor = uci.cursor()
local arguments
local action
local context

captive_portal = {}

vouchera.init()

captive_portal.activate = function(code, mac)
    local res = vouchera.activate(code, mac)
    if res then
        print('Voucher activated!')
        return true
    else
        return nil, "Invalid voucher code '" .. code .. "' or invalid MAC '" .. mac .. "'"
    end
end

-- Checks if the mac of the given context is allowed to browse.
captive_portal.is_mac_authorized = function(mac)
    if vouchera.is_mac_authorized(mac) then
        print('true')
        return true
    else
        print('false')
        os.exit(1)
    end
end

captive_portal.show_active = function()
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then
            print(voucher.tostring())
        end
    end
    return true
end

-- List all vouchers
captive_portal.show = function()
    for _, voucher in pairs(vouchera.vouchers) do
        print(voucher.tostring())
    end
    return true
end

-- Renew voucher
captive_portal.renew_voucher = function(id, new_expiration_date)
    new_expiration_date = tonumber(new_expiration_date)
    if new_expiration_date  then
        return vouchera.update_expiration_date(id, new_expiration_date)
    end
end

captive_portal.deactivate = function(id)
    return vouchera.deactivate(id)
end

captive_portal.add = function(name, code, expiration_date, duration_m)
    local v = {name=name, code=code, expiration_date=tonumber(expiration_date),
               duration=tonumber(duration_m)}
    res, msg = vouchera.add(v)
    if res ~= nil then
        print('ok')
        os.exit(0)
    else
        print(msg)
        os.exit(1)
    end
end

captive_portal.show_authorized_macs = function()
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then
            print(voucher.mac)
        end
    end
    return true
end

-- if is main
if debug.getinfo(2).name == nil then
    local arguments = { ... }
    local action = table.remove(arguments, 1)
    local context = arguments
    local f = captive_portal[action]
    if f ~= nil then
        res, msg = f(unpack(context))
        if not res then
            print(msg or 'error')
            os.exit(1)
        end
    else
        print("invalid command: " .. tostring(action))
    end
end

return captive_portal
