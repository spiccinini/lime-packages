#!/usr/bin/lua

--! LibreMesh is modular but this doesn't mean parallel, modules are executed
--! sequencially, so we don't need to worry about transactionality and all other
--! stuff that affects parrallels database, at moment we don't need parallelism
--! as this is just some configuration stuff and is not performance critical.

local fs = require("nixio.fs")
local libuci = require("uci")

config = {}

function config.log(...)
	print(...)
end

config.uci = nil
config.hooksDir = "/etc/hotplug.d/lime-config"

function config.get_uci_cursor()
	if config.uci == nil then
		config.uci = libuci:cursor()
	end
	return config.uci
end

function config.set_uci_cursor(cursor)
	config.uci = cursor
end

config.uci = config.get_uci_cursor()

--! Minimal /etc/config/lime santitizing
function config.sanitize()
	local lime_path = config.uci:get_confdir() .. '/lime'
	local cf = io.open(lime_path, "r")
	if (cf == nil) then
		cf = io.open(lime_path, "w")
		cf:write("")
	end
	cf:close()


	for _,sectName in pairs({"system","network","wifi"}) do
		config.set(sectName, "lime")
	end
end

function config.get(sectionname, option, fallback)
	local limeconf = config.uci:get("lime", sectionname, option)
	if limeconf then return limeconf end

	local defcnf = config.uci:get("lime-defaults", sectionname, option)
	if ( defcnf ~= nil ) then
		--! just returning the lime-defaults value
	elseif ( fallback ~= nil ) then
		defcnf = fallback
		config.log("Use fallback value for "..sectionname.."."..option..": "..tostring(defcnf))
	else
		config.log("WARNING: Attempt to access undeclared default for: "..sectionname.."."..option)
		config.log(debug.traceback())
	end
	return defcnf
end

--! Execute +callback+ for each config of type +configtype+ found in
--! +/etc/config/lime+.
--! beware this function doesn't look in +/etc/config/lime-default+ for default
--! values as it is designed for use with specific sections only
function config.foreach(configtype, callback)
	return config.uci:foreach("lime", configtype, callback)
end

function config.get_all(sectionname)
	local lime_section = config.uci:get_all("lime", sectionname)
	local lime_def_section = config.uci:get_all("lime-defaults", sectionname)

	if lime_section or lime_def_section then
		local ret = lime_section or {}

		if lime_def_section then
			for key,value in pairs(lime_def_section) do
				if (ret[key] == nil) then
					ret[key] = value
				end
			end
		end

		return ret
	end

	return nil
end

function config.get_bool(sectionname, option, default)
	local val = config.get(sectionname, option, default)
	return (val and ((val == '1') or (val == 'on') or (val == 'true') or (val == 'enabled') or (val == 1) or (val == true)))
end

config.batched = false

function config.init_batch()
	config.batched = true
end

function config.set(...)
	local aty = type(arg[3])
	if (aty ~= "nil" and aty ~= "string" and aty ~= "table") then
		arg[3] = tostring(arg[3])
	end
	config.uci:set("lime", unpack(arg))
	if(not config.batched) then config.uci:save("lime") end
end

function config.delete(...)
	config.uci:delete("lime", unpack(arg))
	if(not config.batched) then config.uci:save("lime") end
end

function config.end_batch()
	if(config.batched) then
		config.uci:save("lime")
		config.batched = false
	end
end

function config.autogenerable(section_name)
	return ( (not config.get_all(section_name)) or config.get_bool(section_name, "autogenerated") )
end

function config.main()
	config.sanitize()

	local modules_name = { "hardware_detection", "wireless", "network", "firewall", "system" }
	local modules = {}

	for i, name in pairs(modules_name) do modules[i] = require("lime."..name) end
	for _,module in pairs(modules) do
		xpcall(module.clean, function(errmsg) print(errmsg) ; print(debug.traceback()) end)
	end

	for _,module in pairs(modules) do
		xpcall(module.configure, function(errmsg) print(errmsg) ; print(debug.traceback()) end)
	end

	for hook in fs.dir(config.hooksDir) do
		local hookCmd = config.hooksDir.."/"..hook.." after"
		print("executed hook:", hookCmd, os.execute(hookCmd))
	end
end

return config
