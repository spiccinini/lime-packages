#!/usr/bin/env lua
--[[
Copyright 2018 Marcos Gutierrez <gmarcos87@gmail.com>
Copyright 2021 Santiago Piccinini <spiccinini@altermundi.net>
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-3.0
]]--

local ubus = require "ubus"
local json = require 'luci.jsonc'
local uci = require 'uci'
local vouchera = require('voucher.vouchera')
local utils = require('lime.utils')

vouchera.init()

local uci_cursor = uci.cursor()

local conn = ubus.connect()
if not conn then
    error("Failed to connect to ubus")
end

local function status(msg)
    local output = logic.iptables_status()
    utils.printJson(output)
end

local function enable(msg)
    uci_cursor:set("pirania", "base_config", "enabled", "1")
    uci_cursor:commit("pirania")
    utils.unsafe_shell("captive-portal start")
    utils.printJson({ success = "ok" })
end

local function disable(msg)
    uci_cursor:set("pirania", "base_config", "enabled", "0")
    uci_cursor:commit("pirania")
    utils.unsafe_shell("captive-portal stop")
    utils.printJson({ success = "ok" })
end

local function show_active_vouchers(msg)
    local active = {}
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then
            table.insert(active, voucher)
        end
    end
    utils.printJson({ success = "ok", vouchers = active })
end

local function show_vouchers(msg)
    utils.printJson({ success = "ok", vouchers = vouchera.vouchers })
end

-- expiration_date is in seconds from epoch
local function extend_voucher_date(msg)
    local voucher = vouchera.update_expiration_date(msg.voucher_name, msg.expiration_date)
    utils.printJson({ success = voucher and 'ok' or 'error' })
end

local function remove_voucher(msg)
    local voucher = vouchera.remove_globally(msg.id)
    utils.printJson({ success = voucher and 'ok' or 'error' })
end

local function renew_voucher(msg)
    local new_expiration_date = tonumber(msg.date)
    if new_expiration_date  then
        local voucher = voucher.update_expiration_date(msg.id, new_expiration_date)
        utils.printJson({ success = voucher and 'ok' or 'error' })
    end
end

local function add_vouchers(msg)
    local vouchers = {}
    for _, data in pairs(msg.vouchers) do
        local v = {name=data.name, code=data.code, expiration_date=data.expiration_date,
                   duration_m=data.duration_m}
        local voucher, msg = vouchera.add(v)
        if voucher == nil then
            return utils.printJson({ status = 'error', message = msg})
        end
        table.insert(vouchers, voucher)
    end
    return utils.printJson({ status = 'ok', vouchers = vouchers})
end

local function activate_voucher(msg)
    local voucher = vouchera.activate(msg.code, msg.mac)
    utils.printJson({ success = voucher and 'ok' or 'error' })
end

local function print_valid_macs(msg)
    local result = {}
    result.macs = {}
    for _, voucher in pairs(vouchera.vouchers) do
        if vouchera.is_active(voucher) then
            table.insert(result.macs, voucher.mac)
        end
    end
    utils.printJson(result);
end

local function show_url(msg)
    utils.printJson({ status = 'ok', url = uci_cursor:get("pirania", "base_config", "portal_url") });
end

local function change_url(msg)
    local url = msg.url
    uci_cursor:set("pirania", "base_config", "portal_url", url)
    uci_cursor:commit("pirania")
    utils.printJson({status = 'ok', url = url});
end


local methods = {
  status = { no_params = 0 },
  enable = { no_params = 0 },
  disable = { no_params = 0 },
  add_vouchers = { vouchers_data = 'value'},
  activate_voucher = { mac = 'value', code = 'value' },
  print_valid_macs = { no_params = 0 },
  show_vouchers = { no_params = 0 },
  show_active_vouchers = { no_params = 0 },
  remove_voucher = { id = 'value' },
  renew_voucher = { id = 'value', date = 0 },
  show_url = { no_params = 0 },
  change_url = { url = 'value' },
}

if arg[1] == 'list' then
    utils.printJson(methods)
end

if arg[1] == 'call' then
  local msg = utils.rpcd_readline()
  msg = json.parse(msg)
  if   arg[2] == 'status'										then status(msg)
  elseif   arg[2] == 'enable'								then enable(msg)
  elseif   arg[2] == 'disable'							then disable(msg)
  elseif   arg[2] == 'print_valid_macs'	  	then print_valid_macs(msg)
  elseif   arg[2] == 'list_vouchers'	    	then list_vouchers(msg)
  elseif   arg[2] == 'show_active_vouchers'	then show_active_vouchers(msg)
  elseif   arg[2] == 'add_vouchers'	        then add_vouchers(msg)
  elseif   arg[2] == 'remove_voucher'	    	then remove_voucher(msg)
  elseif   arg[2] == 'renew_voucher'	    	then renew_voucher(msg)
  elseif   arg[2] == 'activate_voucher'	    	then activate_voucher(msg)
  elseif   arg[2] == 'show_url'	            then show_url(msg)
  elseif   arg[2] == 'change_url'	        	then change_url(msg)

  else     utils.printJson({ error = "Method not found" })
  end
end
